name: "Composite Action File"
description: "Greet someone"
inputs:
# ---Variabelen voor app builds--- #
  type: # type of deployment
    required: true
    default: "go"
  dockerUsername:
    required: true
  dockerPassword:
    required: true
  kubeConfig:
    required: true
  deploymentManifest:
    required: true
  serviceManifest:
    required: true
  namespace:
    required: true
# ---Variabelen voor trivy--- #
  scan-type:
    description: 'Scan type to use for scanning vulnerability'
    required: false
    default: 'image'
  image-ref:
    description: 'image reference(for backward compatibility)'
    required: true
  input:
    description: 'reference of tar file to scan'
    required: false
    default: ''
  scan-ref:
    description: 'Scan reference'
    required: false
    default: '.'
  exit-code:
    description: 'exit code when vulnerabilities were found'
    required: false
    default: '0'
  ignore-unfixed:
    description: 'ignore unfixed vulnerabilities'
    required: false
    default: 'false'
  vuln-type:
    description: 'comma-separated list of vulnerability types (os,library)'
    required: false
    default: 'os,library'
  severity:
    description: 'severities of vulnerabilities to be displayed'
    required: false
    default: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
  format:
    description: 'output format (table, json, template)'
    required: false
    default: 'table'
  template:
    description: 'use an existing template for rendering output (@/contrib/sarif.tpl, @/contrib/gitlab.tpl, @/contrib/junit.tpl'
    required: false
    default: ''
  output:
    description: 'writes results to a file with the specified file name'
    required: false
    default: ''
  skip-dirs:
    description: 'comma separated list of directories where traversal is skipped'
    required: false
    default: ''
  skip-files:
    description: 'comma separated list of files to be skipped'
    required: false
    default: ''
  cache-dir:
    description: 'specify where the cache is stored'
    required: false
    default: ''
  timeout:
    description: 'timeout (default 5m0s)'
    required: false
    default: ''
  ignore-policy:
    description: 'filter vulnerabilities with OPA rego language'
    required: false
    default: ''
  hide-progress:
    description: 'hide progress output'
    required: false
    default: 'true'
  list-all-pkgs:
    description: 'output all packages regardless of vulnerability'
    required: false
    default: 'false'
  security-checks:
    description: 'comma-separated list of what security issues to detect'
    required: false
    default: ''
    
    
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2

    - uses: azure/docker-login@v1
      with:
        login-server: myacr4568975.azurecr.io
        username: ${{ inputs.dockerUsername }}
        password: ${{ inputs.dockerPassword }}

    - name: Build and push go image to ACR
      shell: bash
      id: build-image-go
      if: inputs.type == 'go'
      run: |
        docker build "$GITHUB_WORKSPACE/website" -f  "website/Dockerfile" -t myacr4568975.azurecr.io/go:${{ github.sha }} --label dockerfile-path=website/Dockerfile
        docker push myacr4568975.azurecr.io/go:${{ github.sha }}

    - name: Build and push PHP image to ACR
      shell: bash
      id: build-image-php
      if: inputs.type == 'php'
      run: |
        docker build "$GITHUB_WORKSPACE/guestbook/php-redis" -f  "guestbook/php-redis/Dockerfile" -t myacr4568975.azurecr.io/php:${{ github.sha }} --label dockerfile-path=guestbook/php-redis/Dockerfile
        docker push myacr4568975.azurecr.io/php:${{ github.sha }}

    - name: Build and push C# image to ACR
      shell: bash
      id: build-image-dotnet
      if: inputs.type == 'dotnet'
      run: |
        docker build "$GITHUB_WORKSPACE/voting-app" -f  "voting-app/Dockerfile" -t myacr4568975.azurecr.io/dotnet:${{ github.sha }} --label dockerfile-path=voting-app/Dockerfile
        docker push myacr4568975.azurecr.io/dotnet:${{ github.sha }}

    - uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ inputs.kubeConfig }}
      id: login

    - uses: azure/k8s-deploy@v1.2
      with:
        namespace: default
        manifests: |
          manifests/${{ inputs.namespace }}.yml

    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ inputs.type }}
        container-registry-url: myacr4568975.azurecr.io
        container-registry-username: ${{ inputs.dockerUsername }}
        container-registry-password: ${{ inputs.dockerPassword }}
        secret-name: devopsclustedockerauth

    - uses: azure/k8s-deploy@v1.2
      with:
        namespace: ${{ inputs.type }}
        manifests: |
          manifests/${{ inputs.deploymentManifest }}.yml
          manifests/${{ inputs.serviceManifest }}.yml
        images: |
          myacr4568975.azurecr.io/${{ inputs.type }}:${{ github.sha }}
        imagepullsecrets: |
          devopsclustedockerauth

  using: docker
  image: website/Dockerfile
  args:
    - '-a ${{ inputs.scan-type }}'
    - '-b ${{ inputs.format }}'
    - '-c ${{ inputs.template }}'
    - '-d ${{ inputs.exit-code }}'
    - '-e ${{ inputs.ignore-unfixed }}'
    - '-f ${{ inputs.vuln-type }}'
    - '-g ${{ inputs.severity }}'
    - '-h ${{ inputs.output }}'
    - '-i ${{ inputs.image-ref }}'
    - '-j ${{ inputs.scan-ref }}'
    - '-k ${{ inputs.skip-dirs }}'
    - '-l ${{ inputs.input }}'
    - '-m ${{ inputs.cache-dir }}'
    - '-n ${{ inputs.timeout }}'
    - '-o ${{ inputs.ignore-policy }}'
    - '-p ${{ inputs.hide-progress }}'
    - '-q ${{ inputs.skip-files }}'
    - '-r ${{ inputs.list-all-pkgs }}'
    - '-s ${{ inputs.security-checks }}'