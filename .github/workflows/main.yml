name: Workflow Main
on: 
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
 
jobs:

## --- Building the applications --- ###
  build-correct-application:
    name: Build correct application based on input (programming language)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Build Go-app
    - name: Build Go-application
      uses: WoutBeyens/CICDaas@v14
      with:
        type: 'go'
        dockerUsername: ${{ secrets.acr_myacr4568975_username }}
        dockerPassword: ${{ secrets.acr_myacr4568975_password }}
        kubeConfig: ${{ secrets.aks_devopsclusteraks_kubeConfig }}
        deploymentManifest: goDeployment
        serviceManifest: goService
        namespace: goNamespace

    # Build PHP-app
    - name: Build PHP-application
      uses: WoutBeyens/CICDaas@v14
      with:
        type: 'php'
        dockerUsername: ${{ secrets.acr_myacr4568975_username }}
        dockerPassword: ${{ secrets.acr_myacr4568975_password }}
        kubeConfig: ${{ secrets.aks_devopsclusteraks_kubeConfig }}
        deploymentManifest: phpDeployment
        serviceManifest: phpService
        namespace: phpNamespace

    # Build .NET-app
    - name: Build .NET application
      uses: WoutBeyens/CICDaas@v14
      with:
        type: 'dotnet'
        dockerUsername: ${{ secrets.acr_myacr4568975_username }}
        dockerPassword: ${{ secrets.acr_myacr4568975_password }}
        kubeConfig: ${{ secrets.aks_devopsclusteraks_kubeConfig }}
        deploymentManifest: dotnetDeployment
        serviceManifest: dotnetService
        namespace: dotnetNamespace


## --- Vulnerability scanning Go-applicatie --- #
  VulnerabilityScan:
    name: Scan for vulnerabilities on each application
    runs-on: ubuntu-latest
    steps:

    # Scan Go-app
    - name: Go - Checkout code before vulnerability scan
      uses: actions/checkout@v2
      
    - name: Go - Build an image from Dockerfile for vulnerability scan
      run: |
         docker build "$GITHUB_WORKSPACE/website" -f  "website/Dockerfile" -t myacr4568975.azurecr.io/go:${{ github.sha }} --label dockerfile-path=website/Dockerfile
      
    - name: Go - Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'myacr4568975.azurecr.io/go:${{ github.sha }}'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'    


    # Scan PHP-app
    - name: PHP - Checkout code before vulnerability scan
      uses: actions/checkout@v2
      
    - name: PHP - Build an image from Dockerfile for vulnerability scan
      run: |
         docker build "$GITHUB_WORKSPACE/guestbook/php-redis" -f  "guestbook/php-redis/Dockerfile" -t myacr4568975.azurecr.io/php:${{ github.sha }} --label dockerfile-path=guestbook/php-redis/Dockerfile
      
    - name: PHP - Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'myacr4568975.azurecr.io/php:${{ github.sha }}'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'  

    # Scan .NET-app
    - name: Dotnet - Checkout code before vulnerability scan
      uses: actions/checkout@v2
      
    - name: Dotnet - Build an image from Dockerfile for vulnerability scan
      run: |
         docker build "$GITHUB_WORKSPACE/voting-app" -f  "voting-app/Dockerfile" -t myacr4568975.azurecr.io/dotnet:${{ github.sha }} --label dockerfile-path=voting-app/Dockerfile
      
    - name: Dotnet - Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'myacr4568975.azurecr.io/dotnet:${{ github.sha }}'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'  

## --- Deploying different environments--- #
  DeployDev:
    name: Deploy to Dev env
    if: github.event_name == 'pull_request' # Er wordt enkel gedeployed naar Dev Env als er een pull request wordt gemaakt
    needs: [build-correct-application]
    runs-on: ubuntu-latest
    environment:
      name: Dev env
      url: 'http://20.31.227.54/'
    steps:
      - name: Deploy
        run: echo I am deploying!

  DeployAcc:
    name: Deploy to Acc env
    if: github.event.ref == 'refs/heads/main' # Enkel deploy Acc Env als er gemerged/gecommit wordt naar main
    needs: [build-correct-application]
    runs-on: ubuntu-latest
    environment:
      name: Acc env
      url: 'http://20.31.227.54/'
    steps:
      - name: Deploy
        run: echo I am deploying!
    
  DeployProd:
    name: Deploy to Prod env
    needs: [DeployAcc]
    runs-on: ubuntu-latest
    environment:
      name: Prod env
      url: 'http://20.31.227.54/'
    steps:
      - name: Deploy
        run: echo I am deploying!

## --- Testing different applications--- #
  check-multiple-no-redirect:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    name: Check sinle, no redirect
    steps:
      - uses: actions/checkout@v2
      - uses: WoutBeyens/CICDaas@v14
        with:
          dockerUsername: ${{ secrets.acr_myacr4568975_username }}
          dockerPassword: ${{ secrets.acr_myacr4568975_password }}
          # Check the following URLs one by one sequentially
          url: http://20.31.227.54/